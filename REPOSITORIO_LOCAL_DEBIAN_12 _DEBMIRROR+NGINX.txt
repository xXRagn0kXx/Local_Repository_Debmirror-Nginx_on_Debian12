	REPOSITORIO LOCAL DEBIAN 12  DEBMIRROR + NGINX
	
			En esta guia aprenderemos a crear un repositorio local de Debian12 desde 0(Omitiremos la instalacion de Debian12 en esta guia), el repositorio sera granular y se podra actualizar cada vez deseemos
			para ello lo primero haremos sera crear la estructura donde se alojara el repositorio en nuestro Debian12 recien instalado:

		PRE-REQUISITOS:
			- Usuario con permisos sudo o tener permisos root
			- Conexion a internet desde la maquina a configurar
			- Conocimientos medios de informatica o entender el uso de la guia
			- Una maquina virtual o fisica que tendra un disco para el sistema Debian y otro para el repositorio (200Gb ideal)
			- Se aconseja crear un usuario para el repositorio durante la instalacion de Debian12, nosotros hemos creado "DebMirror"

		1. Instalar el software nesario:
				 - sudo apt install -y debmirror rsync nginx gnupg debian-archive-keyring

		2. Crear el Directorio para el Repositorio

			Primero, crearemos el directorio donde se guardará el repositorio, para ello montaremos un segundo volumen en nuestra maquina Debian12 en la ruta /mnt/Almacen:

				 - sudo mkdir -p /mnt/Almacen


			2.1 Ahora si no hemos introducido el segundo disco en la maquina lo introducimos, nos hacemos root con "su -" o "sudo su" e identificamos el disco:
				- lsblk

			2.2 Una vez indentificado el disco a tratar, si tiene alguna configuracion previa la limpiaremos (si esta en blanco saltar este paso):
				- sudo fdisk /dev/sdX (reemplaza /dev/sdX con el nombre de tu disco).	
				- Presiona d para eliminar una partición. Repite esto para eliminar todas las particiones.
				- Presiona w para escribir los cambios en el disco.
				- Presiona q para salir de fdisk

			2.3 Ahora que el disco esta en blanco vamos a proceder a crearle una particion, usaremos el formato GPT ya que es el actual:

				- sudo fdisk /dev/sdX (reemplaza /dev/sdX con el nombre de tu disco)
				- Presiona m para ver el menu
				- Presiona g para crear la tabla de particiones en formato GPT 
				- Presiona n para crear una nueva particion (le vamos a intro en los valores por defecto hasta crear la particion)
				- Presiona w para escribir los cambios en el disco
				- Presiona q para salir de fdisk

				Ahora comprobamos que se a creado una particion dentro del disco /dev/sdX1 haciendo lsblk

			2.4 Lo siguiente es darle formato a la particion del disco, nosotros usaremos ext4 por su rendimiento y estabilidad en linux: 
				- mkfs.ext4 /dev/sdX1
			
			2.5 Ahora que el disco ya es completamnete utilizable por el sistema vamnos a configurar  su montaje automatico, el primer paso es localizar la UUID que se a generado en la particion al darle 			    formato al disco:
					- blkid
				
				Nos mostrara un listado de todos los discos disponibles, apuntamos solo la UUID del que nos interesa /dev/sdX1

			2.6 Procedemos a crear su montaje automatico:
				- nano /etc/fstab 

				Crearemos una nueva linea debajo del todo (por orden, recomendamos una linea comentada del uso del disco)

					# Disco2 Almacen del repositorio
					UUID=08e21b2a-3eeb-4a60-8bbb-56a2c17b4d72	/mnt/Almacen ext4 defaults,auto		0 	0

					Importante quitar las "" del campo UUID y asegurarnos que la ruta referenciada existe previamente

					Guardamos y salimos

			2.7 Recargamos la confoguracion del fichero 

					- systemctl daemon-reload

			2.8 Montamos el disco y si no da ningun error comprobamos que la ruta creada tiene el tamaño del disco
					- mount -a
				Comprobamos la unidad montada:
					- df -h

					Esta es una linea de ejemplo si estubiera montado en /dev/sdb1
					/dev/sb1	916G	276GB	595G	32%	/mnt/Almacen
			
			2.9 Una vez montado, le concederemos propietario y permisos al usuario que de Nginx que servira los ficheros del disco.

					- mkdir -p /mnt/Almacen/Repositorio
					- chown -R www-data:www-data /mnt/Almacen/Repositorio
					- chmod -R 755 /mnt/Almacen/Repositorio

				Con esto ya tenemos configurado el almacenamiento fisico del repositorio. 
			
			3. Crear los script de debmirror
				Crear el script de sincronización para que utilice el nuevo directorio en "/mnt/Almacen/Repositorio", esta configuracion se divide en 2 repositorios principales,
				el main para los paquetes principales y el security para las actualizaciones de seguridad 
				
				3.1	crear el script main:

					 - nano /usr/local/bin/deb12_main_repo.sh

#!/bin/bash

# Script para actualizar el repositorio local de Debian 12 (Bookworm)
# La idea es dejarlo en un crontab para que actualice el mirror periodicamente solo.

# Directorio donde se guardara el mirror
MIRROR_DIR="/mnt/Almacen/Repositorio/Debian12/main/"

# Directorio donde se Almacenara el log.
LOG_FILE="/mnt/Almacen/Repositorio/Deb12_Main_Repo.log"

#A partir de aqui empezara la grabacion del log.
exec >> "$LOG_FILE" 2>&1
echo ""
echo "=== Iniciando sincronización: $(date) ==="
echo ""

# Parametros de debmirror:
#   --arch: arquitectura (amd64)
#   --nosource: omite los paquetes fuente (si no los necesitas)
#       --root: Raiz del repositorio
#   --host: el mirror de origen. Puedes usar un servidor HTTP o RSYNC.
#       En esta guia se usa el servidor HTTP de deb.debian.org. Si prefieres rsync,
#       cambia --method y --host según corresponda.
#   --method: método de transferencia (http o rsync)
#   --dist: distribuciones a sincronizar.
#       Para Debian 12 (Bookworm) y sus actualizaciones, usamos:
#       bookworm, bookworm-updates, bookworm-security
#	--section: secciones a incluir (main, contrib, non-free).
# 	--progress: muestra progreso (opcional).
#       --verbose: Depura todo lo posible la salida de debmirror.
#       --keyring: Ruta donde esta alojado el anillo de claves del repositorio oficial.
#       --dry-run: Recorre el repostorio oficial y analiza todo lo que necesita descargar pero sin llegar hacerlo.
#	--ignore-release-gpg: omite la verificación de firmas (opcional; úsalo si tienes problemas con GPG,(no recomendado)).
#	--rsync-extra=none: omite el uso de Rync para que no se quede esperando al repositorio de Debian (usa HTTP).
#	--no-remove: No elimina paquetes antiguos.

debmirror \
  --arch=amd64 "$MIRROR_DIR" \
  --nosource \
  --root=debian \
  --host=deb.debian.org \
  --method=https \
  --dist=bookworm,bookworm-updates \
  --verbose \
  --keyring=/usr/share/keyrings/debian-archive-keyring.gpg \
  --progress \
  --section=main,contrib,non-free,non-free-firmware \
  --rsync-extra=none \
# --no-remove
# --dry-run \
# --ignore-release-gpg \

# NOTA: Comentar o descomentar los parametros "--dry-run" y "--ignore-release-gpg", segun sea necesario su uso.

# Finalizar grabacion del log.
echo ""
echo "=== Sincronización finalizada: $(date) ==="
echo ""

##############################################################################################################################################

				3.2	crear el script security

					- nano /usr/local/bin/deb12_security_repo.sh


#!/bin/bash
# Sincronizar repositorio de seguridad (bookworm-security) desde security.debian.org
# Se ejecuta como usuario debmirror

# Directorio donde se guardara el mirror
MIRROR_DIR="/mnt/Almacen/Repositorio/Debian12/security/"

# Directorio donde se Almacenara el log.
LOG_FILE="/mnt/Almacen/Repositorio/Deb12_Security_Repo.log"

#A partir de aqui empezara la grabacion del log.
exec >> "$LOG_FILE" 2>&1
echo ""
echo "=== Iniciando sincronización: $(date) ==="
echo ""


# Parametros de debmirror:
#   --arch: arquitectura (amd64).
#   --nosource: omite los paquetes fuente (si no los necesitas).
#       --root: Raiz del repositorio.
#   	--host: el mirror de origen. Puedes usar un servidor HTTP o RSYNC.
#       En esta guia se usa el servidor HTTP de deb.debian.org. Si prefieres rsync,
#       cambia --method y --host según corresponda.
#   	--method: método de transferencia (http o rsync).
#   	--dist: distribuciones a sincronizar.
#       Para Debian 12 (Bookworm) y sus actualizaciones, usamos:
#       bookworm, bookworm-updates, bookworm-security
#	--section: secciones a incluir (main, contrib, non-free).
#	--progress: muestra progreso (opcional).
#       --verbose: Depura todo lo posible la salida de debmirror.
#       --keyring: Ruta donde esta alojado el anillo de claves del repositorio oficial.
#       --dry-run: Recorre el repostorio oficial y analiza todo lo que necesita descargar pero sin llegar hacerlo.
#	--ignore-release-gpg: omite la verificación de firmas (opcional; úsalo si tienes problemas con GPG,(no recomendado)).
#	--rsync-extra=none: omite el uso de Rync para que no se quede esperando al repositorio de Debian (usa HTTP).
#	--no-remove: No elimina paquetes antiguos

debmirror \
  --arch=amd64 "$MIRROR_DIR" \
  --nosource \
  --root=debian-security \
  --host=security.debian.org \
  --method=http \
  --dist=bookworm-security \
  --verbose \
  --keyring=/usr/share/keyrings/debian-archive-keyring.gpg \
  --progress \
  --section=main,contrib,non-free,non-free-firmware \
  --rsync-extra=none \
# --no-remove \
# --dry-run \
#  --ignore-release-gpg \
# NOTA: Comentar o descomentar los parametros "--dry-run" y  "--ignore-release-gpg", segun sea necesario su uso.

# Finalizar grabacion del log.
echo ""
echo "=== Sincronización finalizada: $(date) ==="
echo ""

##############################################################################################################################################
		Una vez creados los script le damos permisos y propietario al usuario que lo vaya a ejecutar.
		 - chown debmirror:debmirror /usr/local/bin/deb12_main_repo.sh
		 - chown debmirror:debmirror /usr/local/bin/deb12_security_repo.sh
		 - chmod 750 /usr/local/bin/deb12_main_repo.sh
 		 - chmod 750 /usr/local/bin/deb12_security_repo.sh

	4. Configurar nginx para Servir el Repositorio desde /mnt/Almacen/Repositorio/

		Creamos la configuración de nginx para servir la nueva ubicación del repositorio.

	4.1	Crea el siguiente fichero para Ngix que servira nuestra repositorio:
		 - sudo nano /etc/nginx/sites-available/Repositorio

	4.2	Modifica el bloque location para que apunte al nuevo directorio:
		- listen: El puerto
		- server_name: nombre DNS o IP local
		- location: lo que escribiremos despues de la IP desde el cliente http://tu_servidor_o_ip/Repositorio/
		- Alias: ruta a la redirige Nginx
		- autoindex on; para listar ficheros si no existe pagina web.
	    Nota: importante las "/" al final ya que esto indica a Nginx que esto es un directorio no un fichero.

server {
    listen 80;
    server_name 192.168.10.112;

    location /Repositorio/ {
        alias /mnt/Almacen/Repositorio/;
        autoindex on;
    }
}

##############################################################################################################################################
	
	4.2 Activamos el sitio creado en Nginx mediante un enlace simbolco a la ruta sites-enabled:
		 - sudo ln -s /etc/nginx/sites-available/mirror /etc/nginx/sites-enabled/
	
	4.3	Prueba y recarga la configuración de nginx para aplicar los cambios:
		 - sudo nginx -t
		 - sudo systemctl reload nginx

	4.4 Añadir el repositorio al cliente:

		Edita el fichero /etc/apt/sources.list comentando el repositorio original y añadiendo el nuestro con la IP o DNS del servidor:
		 - sudo nano /etc/apt/sources.list

# Repositorio principal original (Bookworm):
#deb http://deb.debian.org/debian bookworm main contrib
# Repositorio actualizaciones original (Bookworm-Updates):
#deb http://deb.debian.org/debian bookworm-updates main contrib
# Repositorio security original (Bookworm-Security):
#deb http://security.debian.org bookworm-security main contrib

# Repositorio principal replica (Bookworm):
deb http://YOUR_IP_OR_DNS/Repositorio/Debian12/main/ bookworm main contrib non-free non-free-firmware

# Reposiotio actualizaciones replica (Bookworm-Updates):
deb http://YOUR_IP_OR_DNS/Repositorio/Debian12/main/ bookworm-updates main contrib non-free non-free-firmware

# Repositorio seguridad  replica (Bookworm-Security):
deb http://YOUR_IP_OR_DNS/Repositorio/Debian12/security/ bookworm-security main contrib non-free non-free-firmware

###############################################################################################################################################
		
		Guardamos el fichero y ejecutamos:
		 - apt update
		
		Si todo sale bien nos mostrara los paquetes nuevos pendientes de descargar, si no tendremos que consultar lso log de /var/log/apt.

	4.6 Actualizar el repositorio periódicamente
		Para mantener el repositorio sincronizado, configura un cron que ejecute el script de actualización cada cierto tiempo. Por ejemplo, puedes configurarlo para que se ejecute semanalmente:

	4.7.1	Edita el archivo de cron:
		- sudo crontab -e
	4.8.2	Agrega la siguiente línea para ejecutar el script de actualización cada 6 horas, debmirror analizara las diferencias y solo descargara lo que cambie o aparezca nuevo:

	0 */6 * * * /usr/local/bin/deb12_main_repo.sh
	0 */6 * * * /usr/local/bin/deb12_security_repo.sh

	Nota: Compobar que las tareas se ejecutan en /mnt/Almacen/Repositorio/

##############################################################################################################################################	

	5. Verificación y solución de problemas
		 - Verificar logs: Revisa /var/log/debmirror.log para verificar si hay errores de sincronización.
		 - Probar acceso: En las máquinas clientes, ejecuta sudo apt update para asegurarte de que puedan conectarse y actualizarse desde el repositorio 	local.


PARA REPOSTORIO SIN FIRMAR:

deb [trusted=yes] http://tu_servidor_o_ip/debian bookworm main contrib non-free
deb [trusted=yes] http://tu_servidor_o_ip/debian bookworm-updates main contrib non-free
